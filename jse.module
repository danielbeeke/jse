<?php

/**
 * Implements hook_menu().
 */
function jse_menu() {
  $jse_configs = entity_load('jse_config');
  $items = array();

  foreach ($jse_configs as $jse_config) {

    $path_exploded = explode('/', $jse_config->endpoint_path);

    foreach ($path_exploded as $delta => $part) {
      if ($part == '%') {
        $entity_loader_argument = $delta;
      }
    }

    if (!isset($entity_loader_argument)) {
      $entity_loader_argument = 'all';
    }

    $items[$jse_config->endpoint_path] = array(
      'type' => MENU_CALLBACK,
      'page callback' => 'jse_endpoint_callback',
      'page arguments' => array($entity_loader_argument, $jse_config->jseid),
      'access callback' => TRUE,
      'delivery callback' => 'jse_deliver'
    );
  }

  $items['admin/config/system/jse'] = array(
    'title' => 'JSON path configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jse_global_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function jse_init() {
  $method = $_SERVER['REQUEST_METHOD'];
  if (isset($_SERVER['HTTP_ORIGIN'])) {
    drupal_add_http_header('Access-Control-Allow-Origin', $_SERVER['HTTP_ORIGIN']);
    drupal_add_http_header('Access-Control-Allow-Credentials', 'true');
  }
  if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS'])) {
    drupal_add_http_header('Access-Control-Allow-Headers', $_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']);
  }
  if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD'])) {
    drupal_add_http_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  }
  if ($method == 'OPTIONS') {
    exit;
  }
}

/**
* Global settings form.
*/
function jse_global_settings_form($form, $form_state) {
  $entity_info = entity_get_info();

  foreach($entity_info as $entity_type => $entity_type_info) {
    if (isset($entity_type_info['fieldable']) && $entity_type_info['fieldable']) {
      foreach ($entity_type_info['bundles'] as $bundle_key => $bundle_info) {
        $form['jse_alias_' . $entity_type . '_' . $bundle_key] = array(
          '#title' => $entity_type_info['label'] . ': ' . $bundle_info['label'],
          '#type' => 'textfield',
          '#default_value' => variable_get('jse_alias_' . $entity_type . '_' . $bundle_key, ''),
        );
      }
    }
  }

  return system_settings_form($form);
}

/**
* Implements hook_entity_info_alter().
*/
function jse_entity_info_alter(&$entity_info) {
  foreach ($entity_info as $entity_type => $entity_type_info) {
    $entity_info[$entity_type]['view modes']['jse_json'] = array(
      'label' => t('JSON'),
      'custom settings' => TRUE,
    );
  }
}

/**
* Implements hook_entity_info().
*/
function jse_entity_info() {
  $return = array(
    'jse_config' => array(
      'label' => t('JSON path'),
      'entity class' => 'jseConfig',
      'controller class' => 'jseConfigController',
      'access callback' => 'jse_access',
      'base table' => 'jse_config',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'jseid',
        'name' => 'name',
      ),
      'load hook' => 'jse_config_load',
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'jse',
      'admin ui' => array(
        'path' => 'admin/structure/jse',
        'file' => 'jse.admin.inc',
      ),
    ),
  );

  return $return;
}

/**
* JSON slimmed entity access.
*/
function jse_access() {
  return TRUE;
}

/**
* Machine name checker on a json path entity.
*/
function jse_exists() {
  return FALSE;
}

/**
* JSON slimmed entity class.
*/
class jseConfig extends Entity {
  protected function defaultLabel() {
    return $this->label;
  }

  protected function defaultUri() {
    return array('path' => 'admin/structure/jse/manage/' . $this->identifier());
  }
}

/**
* Page delivery callback.
*/
function jse_deliver($render_array) {
  drupal_add_http_header('Content-Type', 'application/json');
  echo json_encode($render_array);
}

/**
* JSON slimmed entity controller class.
*/
class jseConfigController extends EntityAPIControllerExportable {
  public function create(array $values = array()) {
    $values += array(
      'label' => '',
    );

    return parent::create($values);
  }
}

/**
* The JSON slimmed entity callback.
*/
function jse_endpoint_callback($entity_loader_argument, $jse_config_id) {
  $GLOBALS['conf']['cache'] = FALSE;

  global $user;

  if (isset($_GET['cache_token'])) {
    $cache_token = check_plain($_GET['cache_token']);
    $jse_entity_ids_cache = cache_get($cache_token, 'cache_jse');

    if (!isset($jse_entity_ids_cache->data)) {
      unset($cache_token);
    }
  }
  if (!isset($jse_entity_ids_cache->data)) {
    $jse_entity_ids_cache = new stdClass();
    $jse_entity_ids_cache->data = array();
    $jse_entity_ids_cache->created = 0;
  }

  $jse_config = entity_load_single('jse_config', $jse_config_id);

  $callbacks = module_invoke_all('jse_info');

  $callback_info = $callbacks[$jse_config->callback];

  $entity_types_with_ids = call_user_func($callback_info['callback']);

  $response = array();

  $entity_types_with_ids = jse_get_needed_ids_from_request($entity_types_with_ids, $jse_entity_ids_cache);

  foreach ($entity_types_with_ids as $entity_type => $entity_ids) {
    if (is_array($entity_ids)) {
      foreach ($entity_ids as $entity_id) {
        $jse_entity_ids_cache->data[$entity_type][$entity_id] = $entity_id;
        jse_add_entity_to_response($response, $entity_id, $entity_type, $jse_config);
      }
    }
  }

  if (!isset($cache_token)) {
    $cache_hash = (string) microtime(TRUE);
    $cache_hash = (int) str_replace('.', '', $cache_hash);
    $cache_token = alphaID($cache_hash, FALSE);
  }

  $response['cache_token'] = $cache_token;

  $cache_data = $jse_entity_ids_cache->data;
  $new_cache = cache_set($cache_token, $cache_data, 'cache_jse', REQUEST_TIME);

  return $response;
}

/**
* Removes unneeded entitys from the response and updates the cache.
* TODO refactor this function so it only does one thing.
*/
function jse_get_needed_ids_from_request($entity_types_with_ids, &$cache) {
  foreach ($entity_types_with_ids as $entity_type => $entity_ids) {
    $entity_info = entity_get_info($entity_type);

    if (!isset($cache->data[$entity_type])) {
      $cache->data[$entity_type] = array();
    }

    if (count($cache->data[$entity_type]) && isset($entity_info['revision table'])) {
      // Get updated entities from the cache
      $query = db_select($entity_info['base table'], 'e');
      $query->fields('e', array($entity_info['entity keys']['id'], 'changed'))
      ->condition($entity_info['entity keys']['id'], $cache->data[$entity_type], 'IN')
      ->condition('changed', $cache->created, '>');

      $result = $query->execute();
      $invalid_cache_entities = array();

      while ($record = $result->fetchAssoc()) {
        // Remove invalid cache items.
        unset($cache->data[$entity_type][$record[$entity_info['entity keys']['id']]]);
      }
    }

    // Get all needed entities minus the cache.
    $entity_types_with_ids[$entity_type] = array_diff($entity_types_with_ids[$entity_type], $cache->data[$entity_type]);
  }

  return $entity_types_with_ids;
}

/**
* Add's an entity to the JSON response.
*/
function jse_add_entity_to_response(&$response, $entity_id, $entity_type, $jse_config) {
  $entity = entity_load_single($entity_type, $entity_id);
  $entity_info = entity_get_info($entity_type);

  if (!isset($entity_info['bundle keys']['bundle'])) {
    $bundle_key = $entity_type;
  }
  else {
    $bundle_key = $entity->{$entity_info['bundle keys']['bundle']};
  }

  $entity_type_alias = variable_get('jse_alias_' . $entity_type . '_' . $bundle_key, $entity_type . '_' . $bundle_key);

  $slimmed_entity = jse_slimmed_render($entity_type, $entity, $entity_id);
  $response[$entity_type_alias][$entity_id] = $slimmed_entity;
}

/**
* Renders an entity to a slimmed down version.
*/
function jse_slimmed_render($entity_type, $entity, $entity_id) {
  $entities_prepared = entity_view($entity_type, array($entity), 'jse_json');

  $entity_prepared = reset($entities_prepared[$entity_type]);
  $entity_info = entity_get_info($entity_type);

  if (!isset($entity_info['bundle keys']['bundle'])) {
    $bundle = $entity_type;
  }
  else {
    $bundle = $entity->{$entity_info['bundle keys']['bundle']};
  }

  $slimmed_entity = array();

  if (module_exists('ds')) {
    $ds_info = ds_get_field_settings($entity_type, $bundle, 'jse_json');
  }

  unset($entity_prepared['links']);
  foreach ($entity_prepared as $key => &$render_item) {
    if (substr($key, 0, 1) != '#') {
      if (isset($ds_info[$key]['formatter_settings']['ft']['lb'])) {
        $label = $ds_info[$key]['formatter_settings']['ft']['lb'];
      }
      else {
        $label = $key;
      }

      $render_item['#label_display'] = 'hidden';

      $field_info = field_info_field($key);

      if (substr($key, 0, 4) == 'jse_') {
        $slimmed_entity[$label] = $render_item[0]['#markup'][LANGUAGE_NONE];
      }
      else {
        if (isset($field_info['cardinality']) && ($field_info['cardinality'] == -1 || $field_info['cardinality'] > 1)) {
          foreach ($render_item as $delta => $render_item_sub_item) {
            if (is_numeric($delta)) {
              $slimmed_entity[$label][] = render($render_item_sub_item);
            }
          }
        }
        else {
          $slimmed_entity[$label] = render($render_item);
        }
      }

    }
  }

  return $slimmed_entity;
}



/**
 * Implements hook_ds_fields_info().
 */
function jse_ds_fields_info($entity_type) {
  $fields = array();

  $properties = array(
    'uid' => t('Property: Author'),
    'alias' => t('Property: Alias'),
    'type' => t('Property: Type'),
  );

  foreach ($properties as $property_key => $property_label) {
    $fields[$entity_type]['jse_' . $property_key] = array(
      'title' => $property_label,
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'jse_return_entity_property',
    );
  }

  $entity_fields_info = field_info_fields();

  foreach ($entity_fields_info as $property_key => $value) {
    $fields[$entity_type]['jse_' . $property_key] = array(
      'title' => t('Property') . ' ' . $property_key,
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'jse_return_entity_property',
    );
  }

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }
}

function jse_return_entity_property($field) {
  $property = substr($field['field_name'], 4);

  if (isset($field['entity']->{$property})) {
    return $field['entity']->{$property};
  }
}

function jse_return_entity_property_alias($field) {
  $path_object = entity_uri($field['entity_type'], $field['entity']);
  $alias = drupal_get_path_alias($path_object['path']);
  return $alias;
}

/**
 * Translates a number to a short alhanumeric version
 *
 * Translated any number up to 9007199254740992
 * to a shorter version in letters e.g.:
 * 9007199254740989 --> PpQXn7COf
 *
 * specifiying the second argument true, it will
 * translate back e.g.:
 * PpQXn7COf --> 9007199254740989
 *
 * this function is based on any2dec && dec2any by
 * fragmer[at]mail[dot]ru
 * see: http://nl3.php.net/manual/en/function.base-convert.php#52450
 *
 * If you want the alphaID to be at least 3 letter long, use the
 * $pad_up = 3 argument
 *
 * In most cases this is better than totally random ID generators
 * because this can easily avoid duplicate ID's.
 * For example if you correlate the alpha ID to an auto incrementing ID
 * in your database, you're done.
 *
 * The reverse is done because it makes it slightly more cryptic,
 * but it also makes it easier to spread lots of IDs in different
 * directories on your filesystem. Example:
 * $part1 = substr($alpha_id,0,1);
 * $part2 = substr($alpha_id,1,1);
 * $part3 = substr($alpha_id,2,strlen($alpha_id));
 * $destindir = "/".$part1."/".$part2."/".$part3;
 * // by reversing, directories are more evenly spread out. The
 * // first 26 directories already occupy 26 main levels
 *
 * more info on limitation:
 * - http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/165372
 *
 * if you really need this for bigger numbers you probably have to look
 * at things like: http://theserverpages.com/php/manual/en/ref.bc.php
 * or: http://theserverpages.com/php/manual/en/ref.gmp.php
 * but I haven't really dugg into this. If you have more info on those
 * matters feel free to leave a comment.
 *
 * The following code block can be utilized by PEAR's Testing_DocTest
 * <code>
 * // Input //
 * $number_in = 2188847690240;
 * $alpha_in  = "SpQXn7Cb";
 *
 * // Execute //
 * $alpha_out  = alphaID($number_in, false, 8);
 * $number_out = alphaID($alpha_in, true, 8);
 *
 * if ($number_in != $number_out) {
 *   echo "Conversion failure, ".$alpha_in." returns ".$number_out." instead of the ";
 *   echo "desired: ".$number_in."\n";
 * }
 * if ($alpha_in != $alpha_out) {
 *   echo "Conversion failure, ".$number_in." returns ".$alpha_out." instead of the ";
 *   echo "desired: ".$alpha_in."\n";
 * }
 *
 * // Show //
 * echo $number_out." => ".$alpha_out."\n";
 * echo $alpha_in." => ".$number_out."\n";
 * echo alphaID(238328, false)." => ".alphaID(alphaID(238328, false), true)."\n";
 *
 * // expects:
 * // 2188847690240 => SpQXn7Cb
 * // SpQXn7Cb => 2188847690240
 * // aaab => 238328
 *
 * </code>
 *
 * @author  Kevin van Zonneveld &lt;kevin@vanzonneveld.net>
 * @author  Simon Franz
 * @author  Deadfish
 * @author  SK83RJOSH
 * @copyright 2008 Kevin van Zonneveld (http://kevin.vanzonneveld.net)
 * @license   http://www.opensource.org/licenses/bsd-license.php New BSD Licence
 * @version   SVN: Release: $Id: alphaID.inc.php 344 2009-06-10 17:43:59Z kevin $
 * @link    http://kevin.vanzonneveld.net/
 *
 * @param mixed   $in   String or long input to translate
 * @param boolean $to_num  Reverses translation when true
 * @param mixed   $pad_up  Number or boolean padds the result up to a specified length
 * @param string  $pass_key Supplying a password makes it harder to calculate the original ID
 *
 * @return mixed string or long
 */
function alphaID($in, $to_num = false, $pad_up = false, $pass_key = null)
{
  $out   =   '';
  $index = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  $base  = strlen($index);

  if ($pass_key !== null) {
    // Although this function's purpose is to just make the
    // ID short - and not so much secure,
    // with this patch by Simon Franz (http://blog.snaky.org/)
    // you can optionally supply a password to make it harder
    // to calculate the corresponding numeric ID

    for ($n = 0; $n < strlen($index); $n++) {
      $i[] = substr($index, $n, 1);
    }

    $pass_hash = hash('sha256',$pass_key);
    $pass_hash = (strlen($pass_hash) < strlen($index) ? hash('sha512', $pass_key) : $pass_hash);

    for ($n = 0; $n < strlen($index); $n++) {
      $p[] =  substr($pass_hash, $n, 1);
    }

    array_multisort($p, SORT_DESC, $i);
    $index = implode($i);
  }

  if ($to_num) {
    // Digital number  <<--  alphabet letter code
    $len = strlen($in) - 1;

    for ($t = $len; $t >= 0; $t--) {
      $bcp = bcpow($base, $len - $t);
      $out = $out + strpos($index, substr($in, $t, 1)) * $bcp;
    }

    if (is_numeric($pad_up)) {
      $pad_up--;

      if ($pad_up > 0) {
        $out -= pow($base, $pad_up);
      }
    }
  } else {
    // Digital number  -->>  alphabet letter code
    if (is_numeric($pad_up)) {
      $pad_up--;

      if ($pad_up > 0) {
        $in += pow($base, $pad_up);
      }
    }

    for ($t = ($in != 0 ? floor(log($in, $base)) : 0); $t >= 0; $t--) {
      $bcp = bcpow($base, $t);
      $a   = floor($in / $bcp) % $base;
      $out = $out . substr($index, $a, 1);
      $in  = $in - ($a * $bcp);
    }
  }

  return $out;
}

/**
 * Implements hook_flush_caches().
 */
function jse_flush_caches() {
  return array('cache_jse');
}
